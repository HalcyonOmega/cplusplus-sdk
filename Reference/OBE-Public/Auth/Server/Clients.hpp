#pragma once

#include "../Core/Common.hpp"

// TODO: Fix External Ref: OAuthClientInformationFull from "../../shared/auth.js"

MCP_NAMESPACE_BEGIN

/**
 * Stores information about registered OAuth clients for this server.
 */
struct OAuthRegisteredClientsStore {
    virtual ~OAuthRegisteredClientsStore() = default;

    /**
     * Returns information about a registered client, based on its ID.
     */
    virtual future<optional<Auth::OAuthClientInformationFull>>
    GetClient(const string& ClientID) = 0;

    /**
     * Registers a new client with the server. The client ID and secret will be automatically
     * generated by the library. A modified version of the client information can be returned to
     * reflect specific values enforced by the server.
     *
     * NOTE: Implementations should NOT delete expired client secrets in-place. Auth middleware
     * provided by this library will automatically check the `client_secret_expires_at` field and
     * reject requests with expired secrets. Any custom logic for authenticating clients should
     * check the `client_secret_expires_at` field as well.
     *
     * If unimplemented, dynamic client registration is unsupported.
     */
    virtual future<optional<Auth::OAuthClientInformationFull>>
    RegisterClient(const Auth::OAuthClientInformationFull& Client) {
        return async(launch::deferred, []() {
            return nullopt;
        }); // Default implementation - dynamic client registration is unsupported
    }
};

MCP_NAMESPACE_END